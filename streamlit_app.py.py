# -*- coding: utf-8 -*-
"""Project 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GX0bCl94wWNXxat_vsl0f5AZ7KG9tXnK
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_csv("task_recommendation_dataset.csv")
df.head()
from sklearn.feature_extraction.text import TfidfVectorizer

# Use Description column to create features
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(df["Description"])
from sklearn.metrics.pairwise import cosine_similarity

# Compute similarity matrix (every task compared to every other task)
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Display sample: similarity of Task 1 to all tasks
import numpy as np
print("Similarity of Task 1 to others:\n", np.round(cosine_sim[0], 2))
# Let's recommend similar tasks for Task ID 1 (index 0)
task_index = 0  # Task ID 1

# Get pairwise similarities for this task
similar_scores = list(enumerate(cosine_sim[task_index]))

# Sort tasks by similarity score
similar_tasks = sorted(similar_scores, key=lambda x: x[1], reverse=True)

# Display top 3 most similar tasks (excluding itself)
print("\nTop 3 similar tasks:")
for i in similar_tasks[1:4]:
    print(f"Task ID: {df.iloc[i[0]]['Task ID']}, Similarity: {i[1]:.2f}, Description: {df.iloc[i[0]]['Description']}")

# Choose a user
target_user = "Alice"

# Get task indexes for tasks Bob has worked on
user_task_indexes = df[df['Assigned To'] == target_user].index.tolist()

# Get all other (unassigned or assigned to others) task indexes
other_tasks = df[df['Assigned To'] != target_user].index.tolist()

# Average similarity of other tasks to Bob's tasks
recommendations = []
for i in other_tasks:
    sim_scores = [cosine_sim[i][j] for j in user_task_indexes]
    avg_score = sum(sim_scores) / len(sim_scores)
    recommendations.append((i, avg_score))

# Sort and show top 5 recommendations
top_recommendations = sorted(recommendations, key=lambda x: x[1], reverse=True)[:5]

print(f"\nðŸ“Œ Top 5 recommended tasks for {target_user}:\n")
for idx, score in top_recommendations:
    task = df.iloc[idx]
    print(f"Task ID: {task['Task ID']}, Similarity: {score:.2f}, Description: {task['Description']}")